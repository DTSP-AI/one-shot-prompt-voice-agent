[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "livekit-langgraph-agent"
version = "1.0.0"
description = "AI voice agent with LiveKit, LangGraph, Deepgram, ElevenLabs, and Mem0"
authors = [{name = "Voice Agent Team", email = "team@example.com"}]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Conferencing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "langgraph>=0.3.31",
    "langchain>=0.3.23",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.6",
    "python-dotenv>=1.0.1",
    "pydantic>=2.9.2",
    "httpx>=0.27.2",
    "livekit>=0.16.1",
    "livekit-agents>=0.10.0",
    "deepgram-sdk>=3.7.6",
    "elevenlabs>=1.8.1",
    "openai>=1.52.2",
    "opencv-python>=4.10.0.84",
    "numpy>=2.1.1",
    "Pillow>=10.4.0",
    "mem0ai>=0.1.17",
    "twilio>=9.2.4",
    "websockets>=12.0",
    "pydantic-settings>=2.5.2",
]

[project.optional-dependencies]
test = [
    "pytest>=8.3.2",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.27.2",
]
dev = [
    "black>=24.8.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
]

[project.urls]
Homepage = "https://github.com/example/livekit-langgraph-agent"
Documentation = "https://github.com/example/livekit-langgraph-agent#readme"
Repository = "https://github.com/example/livekit-langgraph-agent.git"
Issues = "https://github.com/example/livekit-langgraph-agent/issues"

[project.scripts]
voice-agent = "app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["agents*", "tools*"]

[tool.black]
target-version = ['py311']
line-length = 100
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["agents", "tools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]