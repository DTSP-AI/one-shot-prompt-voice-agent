version: '3.8'
services:
  # Redis Cache Layer - Target Architecture
  redis:
    image: redis:7-alpine
    container_name: oneshot-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL Database - Target Architecture
  postgres:
    image: postgres:15
    container_name: oneshot-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: oneshotvoice
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/core/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.12.1
    container_name: oneshot-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.backend
    container_name: oneshot-backend
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - QDRANT_URL=http://qdrant:6333
      - MEM0_DB_PATH=/app/data/mem0.db
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/oneshotvoice
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    depends_on:
      - redis
      - postgres
      - qdrant
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile.frontend
    container_name: oneshot-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
  postgres_data:
  qdrant_data:
  backend_data:
  backend_logs:

networks:
  default:
    driver: bridge