version: "3.9"

services:
  backend:
    build:
      context: ../
      dockerfile: backend/Dockerfile
    container_name: voice-agent-backend
    env_file:
      - ../backend/.env
    environment:
      - PORT=8000
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ../logs:/app/logs
      - ../backend/memory_store:/app/memory_store
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - voice-agent-network
    depends_on:
      - redis
      - postgres

  frontend:
    build:
      context: ../
      dockerfile: frontend/Dockerfile
    container_name: voice-agent-frontend
    environment:
      - NEXT_PUBLIC_API_BASE=http://localhost:8000
      - NEXT_PUBLIC_LIVEKIT_URL=${LIVEKIT_URL}
      - NEXT_PUBLIC_DEFAULT_ROOM=agent-room
      - NEXT_PUBLIC_DARK_MODE=true
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - voice-agent-network

  redis:
    image: redis:7-alpine
    container_name: voice-agent-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - voice-agent-network

  postgres:
    image: postgres:15-alpine
    container_name: voice-agent-postgres
    environment:
      - POSTGRES_DB=voice_agent
      - POSTGRES_USER=voice_agent
      - POSTGRES_PASSWORD=voice_agent_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../infra/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voice_agent -d voice_agent"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - voice-agent-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: voice-agent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../infra/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../infra/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - voice-agent-network
    profiles:
      - production

  # Optional: Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: voice-agent-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ../infra/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - voice-agent-network
    profiles:
      - monitoring

  # Optional: Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: voice-agent-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../infra/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../infra/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - voice-agent-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  voice-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16